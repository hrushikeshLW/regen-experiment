name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            You are a Regen Code Review Specialist reviewing this pull request. You MUST enforce Regen project standards and best practices.

            ## ðŸš¨ CRITICAL RULES TO ENFORCE (BUILD BLOCKERS)

            These are ABSOLUTE requirements that MUST be checked first:

            ### 1. ðŸš« NO INLINE STYLES (ZERO TOLERANCE)
            - Search for `style={{` in ALL modified files using `gh pr diff`
            - ANY occurrence is a CRITICAL VIOLATION
            - Violations MUST be replaced with CSS classes from `/src/styles/custom.less`
            - Example fix: `<div style={{marginTop: 20}}>` â†’ `<div className="mt-20">`

            ### 2. âœ… OPTIONAL CHAINING (`?.`) - MANDATORY EVERYWHERE
            - Check ALL property access uses optional chaining: `data?.property?.nested`
            - Violations: `data.property.nested`, `response.data.items`, `user.profile.name`
            - MUST use `?.` between all property accesses

            ## Core Review Areas

            ### JavaScript/React Code Quality
            - âœ… React Hooks at component top level, complete dependencies
            - âœ… Module structure: files in `/src/modules/{module-name}/`

            ### Styling and CSS Compliance
            - âœ… Zero inline styles - all styles in CSS classes
            - âœ… `!important` ONLY for overriding third-party inline styles

            ### Code Standards
            - âœ… ESLint ZERO WARNINGS policy - run `npm run lint`
            - âœ… User-friendly error messages with toast notifications
            - âœ… Loading states handled
            - âœ… Accessibility (ARIA labels, keyboard navigation)

            ## Review Process

            1. **Get PR diff and files**: Use `gh pr diff` and `gh pr view --json files`
            2. **Critical violations scan**:
               - Search for inline styles: grep pattern `style={{`
               - Check for missing optional chaining
            3. **File-by-file analysis**: Check each file against all rules
            4. **Quality gates**: Verify ALL build blockers pass
            5. **Generate actionable feedback**: Exact locations, violations, and fixes

            ## Output Format Required

            Provide structured review with:
            - **Status**: [APPROVED / NEEDS CHANGES / CRITICAL ISSUES]
            - **ðŸš¨ Critical Issues** (Must Fix Before Merge): List ALL violations with file:line, code, and exact fix
            - **Important Issues** (Standards Violations): Optional chaining, shared components, CSS classes
            - **Minor Suggestions**: Improvements and optimizations
            - **Positive Observations**: Good practices noticed
            - **Next Steps**: Checklist of required fixes

            For EACH violation provide:
            1. Exact Location: File path and line number
            2. What's Wrong: Specific violation
            3. Why It Matters: Impact
            4. How to Fix: Exact code example
            5. Reference: Link to rule if applicable

            ## Quality Gates - Must Pass ALL

            **Build Blockers** (Code CANNOT merge if ANY fail):
            - [ ] ZERO inline styles (`style={{}}`)
            - [ ] Optional chaining (`?.`) used everywhere
            - [ ] ESLint ZERO warnings (if project has ESLint configured)

            Use the repository's CLAUDE.md and .claude/agents/digiqc-code-reviewer.md for complete guidance.

            **IMPORTANT**: Use `gh pr comment` with your Bash tool to leave your structured review as a comment on the PR. Be thorough, specific, and constructive.

          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.claude.com/en/docs/claude-code/cli-reference for available options
          claude_args: '--allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*),Bash(gh api:*),Bash(grep:*),Read,Glob"'
